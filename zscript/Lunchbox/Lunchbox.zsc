const HDLD_LUNCHBOX = "LCB";

//Commented out everything relating to carrying multiple boxes, because
//it causes a VM abort when dropping one. I don't think it's necessary to carry more than one anyway,
//so it's all good.		-Slogstin

//==================================================
// Base Definition
//==================================================
class VIRLunchbox : HDBackpack {
	default {
		tag "$TAG_LUNCHBOX";
		HDBackpack.MaxCapacity 200;
		Inventory.Icon "LCBXA0";
		Inventory.PickupMessage "$PICKUP_LUNCHBOX";
		inventory.pickupsound "Lunchbox/Pick";
		scale 0.6;
		hdweapon.wornlayer 0;
		hdweapon.refid HDLD_LUNCHBOX;
	}

	override string, double GetPickupSprite() { return "LCBXA0", 1.0; }

	override void BeginPlay() {
		super.BeginPlay();
		Storage = new('LCHBX_ItemStorage');
//		weaponstatus[LCHBX_AMOUNT] = max(weaponstatus[LCHBX_AMOUNT], 1);
		UpdateCapacity();
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
//		weaponstatus[LCHBX_AMOUNT] = max(weaponstatus[LCHBX_AMOUNT], 1);
		UpdateCapacity();
	}

	// Thanks Accensus for figuring out multiple pouches in loadout codes!
	override void LoadoutConfigure(string input) {
/*		int amt = input.ToInt();
		if (amt > 0)
		{
			weaponstatus[LCHBX_AMOUNT] = amt;
			UpdateCapacity();
		}*/
		super.LoadoutConfigure(input);
	}
	
	override bool IsBeingWorn() { return false; }

	States {
		Spawn:
			LCBX ABC -1 NoDelay
			{
				if (invoker.Storage.TotalBulk ~== 0)
				{
					frame = 1;
				}
				else if (target)
				{
					translation = target.translation;
					frame = 2;
				}
				invoker.bNO_AUTO_SWITCH = false;
			}
			Stop;
		Select0:
		TNT1 A 10{
			A_UpdateStorage(); // [Ace] Populates items.
			A_StartSound("Lunchbox/open", CHAN_WEAPON);
			if (invoker.Storage.TotalBulk > (HDCONST_BPMAX * 0.7))
			{
				A_SetTics(20);
			}
		}
		TNT1 A 0 A_Raise(999);
		Wait;
		User3:
			#### # 0 A_MagManager("");
			goto Ready;
	}

	enum LCHBXPouchSlots {
		LCHBX_AMOUNT
	}
}
